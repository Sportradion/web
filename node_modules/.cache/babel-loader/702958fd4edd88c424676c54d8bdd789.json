{"ast":null,"code":"var _classCallCheck = require(\"/Users/carlleandersson/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/carlleandersson/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar toDataView = require('to-data-view');\n\nfunction makeDivisibleByFour(input) {\n  var rest = input % 4;\n  return rest ? input + 4 - rest : input;\n}\n\nvar Bitmap = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Bitmap(data, offset, _ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        colorDepth = _ref.colorDepth,\n        format = _ref.format;\n\n    _classCallCheck(this, Bitmap);\n\n    this.format = format;\n    this.offset = offset;\n    this.depth = colorDepth;\n    this.stride = makeDivisibleByFour(width * this.depth / 8);\n    this.size = this.stride * height;\n    this.data = data.slice(this.offset, this.offset + this.size);\n\n    if (this.size !== this.data.byteLength) {\n      throw new Error('Truncated bitmap data');\n    }\n  }\n\n  _createClass(Bitmap, [{\n    key: \"get\",\n    value: function get(x, y, channel) {\n      var idx = this.format.indexOf(channel);\n\n      if (this.depth === 1) {\n        var slice = this.data[y * this.stride + (x / 8 | 0)];\n        var mask = 1 << 7 - x % 8 * 1;\n        return (slice & mask) >> 7 - x % 8 * 1;\n      }\n\n      if (this.depth === 2) {\n        var _slice = this.data[y * this.stride + (x / 4 | 0)];\n\n        var _mask = 3 << 6 - x % 4 * 2;\n\n        return (_slice & _mask) >>> 6 - x % 4 * 2;\n      }\n\n      if (this.depth === 4) {\n        var _slice2 = this.data[y * this.stride + (x / 2 | 0)];\n\n        var _mask2 = 15 << 4 - x % 2 * 4;\n\n        return (_slice2 & _mask2) >>> 4 - x % 2 * 4;\n      }\n\n      return this.data[y * this.stride + x * (this.depth / 8) + idx];\n    }\n  }]);\n\n  return Bitmap;\n}();\n\nfunction decodeTrueColorBmp(data, _ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      colorDepth = _ref2.colorDepth,\n      icon = _ref2.icon;\n\n  if (colorDepth !== 32 && colorDepth !== 24) {\n    throw new Error(\"A color depth of \".concat(colorDepth, \" is not supported\"));\n  }\n\n  var xor = new Bitmap(data, 0, {\n    width: width,\n    height: height,\n    colorDepth: colorDepth,\n    format: 'BGRA'\n  });\n  var and = colorDepth === 24 && icon ? new Bitmap(data, xor.offset + xor.size, {\n    width: width,\n    height: height,\n    colorDepth: 1,\n    format: 'A'\n  }) : null;\n  var result = new Uint8Array(width * height * 4);\n  var idx = 0;\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      result[idx++] = xor.get(x, height - y - 1, 'R');\n      result[idx++] = xor.get(x, height - y - 1, 'G');\n      result[idx++] = xor.get(x, height - y - 1, 'B');\n\n      if (colorDepth === 32) {\n        result[idx++] = xor.get(x, height - y - 1, 'A');\n      } else {\n        result[idx++] = and && and.get(x, height - y - 1, 'A') ? 0 : 255;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction decodePaletteBmp(data, _ref3) {\n  var width = _ref3.width,\n      height = _ref3.height,\n      colorDepth = _ref3.colorDepth,\n      colorCount = _ref3.colorCount,\n      icon = _ref3.icon;\n\n  if (colorDepth !== 8 && colorDepth !== 4 && colorDepth !== 2 && colorDepth !== 1) {\n    throw new Error(\"A color depth of \".concat(colorDepth, \" is not supported\"));\n  }\n\n  var colors = new Bitmap(data, 0, {\n    width: colorCount,\n    height: 1,\n    colorDepth: 32,\n    format: 'BGRA'\n  });\n  var xor = new Bitmap(data, colors.offset + colors.size, {\n    width: width,\n    height: height,\n    colorDepth: colorDepth,\n    format: 'C'\n  });\n  var and = icon ? new Bitmap(data, xor.offset + xor.size, {\n    width: width,\n    height: height,\n    colorDepth: 1,\n    format: 'A'\n  }) : null;\n  var result = new Uint8Array(width * height * 4);\n  var idx = 0;\n\n  for (var y = 0; y < height; y++) {\n    for (var x = 0; x < width; x++) {\n      var colorIndex = xor.get(x, height - y - 1, 'C');\n      result[idx++] = colors.get(colorIndex, 0, 'R');\n      result[idx++] = colors.get(colorIndex, 0, 'G');\n      result[idx++] = colors.get(colorIndex, 0, 'B');\n      result[idx++] = and && and.get(x, height - y - 1, 'A') ? 0 : 255;\n    }\n  }\n\n  return result;\n}\n\nfunction checkMagicBytes(bytes) {\n  if (bytes !== 0x4D42) throw new Error(\"Invalid magic byte 0x\".concat(bytes.toString(16)));\n}\n\nmodule.exports = function decodeBmp(source) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$width = _ref4.width,\n      iconWidth = _ref4$width === void 0 ? 0 : _ref4$width,\n      _ref4$height = _ref4.height,\n      iconHeight = _ref4$height === void 0 ? 0 : _ref4$height,\n      _ref4$icon = _ref4.icon,\n      icon = _ref4$icon === void 0 ? false : _ref4$icon;\n\n  var data = toDataView(source);\n  var headerSize;\n  var bitmapWidth;\n  var bitmapHeight;\n  var colorDepth;\n  var colorCount;\n\n  if (icon) {\n    headerSize = data.getUint32(0, true);\n    bitmapWidth = data.getUint32(4, true) / 1 | 0;\n    bitmapHeight = data.getUint32(8, true) / 2 | 0;\n    colorDepth = data.getUint16(14, true);\n    colorCount = data.getUint32(32, true);\n  } else {\n    checkMagicBytes(data.getUint16(0, true));\n    headerSize = 14 + data.getUint32(14, true);\n    bitmapWidth = data.getUint32(18, true);\n    bitmapHeight = data.getUint32(22, true);\n    colorDepth = data.getUint16(28, true);\n    colorCount = data.getUint32(46, true);\n  }\n\n  if (colorCount === 0 && colorDepth <= 8) {\n    colorCount = 1 << colorDepth;\n  }\n\n  var width = bitmapWidth === 0 ? iconWidth : bitmapWidth;\n  var height = bitmapHeight === 0 ? iconHeight : bitmapHeight;\n  var bitmapData = new Uint8Array(data.buffer, data.byteOffset + headerSize, data.byteLength - headerSize);\n  var result = colorCount ? decodePaletteBmp(bitmapData, {\n    width: width,\n    height: height,\n    colorDepth: colorDepth,\n    colorCount: colorCount,\n    icon: icon\n  }) : decodeTrueColorBmp(bitmapData, {\n    width: width,\n    height: height,\n    colorDepth: colorDepth,\n    icon: icon\n  });\n  return {\n    width: width,\n    height: height,\n    data: result,\n    colorDepth: colorDepth\n  };\n};","map":{"version":3,"sources":["/Users/carlleandersson/web/node_modules/decode-bmp/index.js"],"names":["toDataView","require","makeDivisibleByFour","input","rest","Bitmap","data","offset","width","height","colorDepth","format","depth","stride","size","slice","byteLength","Error","x","y","channel","idx","indexOf","mask","decodeTrueColorBmp","icon","xor","and","result","Uint8Array","get","decodePaletteBmp","colorCount","colors","colorIndex","checkMagicBytes","bytes","toString","module","exports","decodeBmp","source","iconWidth","iconHeight","headerSize","bitmapWidth","bitmapHeight","getUint32","getUint16","bitmapData","buffer","byteOffset"],"mappings":"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","sourcesContent":["const toDataView = require('to-data-view')\n\nfunction makeDivisibleByFour (input) {\n  const rest = input % 4\n\n  return rest ? input + 4 - rest : input\n}\n\nclass Bitmap {\n  constructor (data, offset, { width, height, colorDepth, format }) {\n    this.format = format\n    this.offset = offset\n    this.depth = colorDepth\n    this.stride = makeDivisibleByFour(width * this.depth / 8)\n    this.size = (this.stride * height)\n    this.data = data.slice(this.offset, this.offset + this.size)\n\n    if (this.size !== this.data.byteLength) {\n      throw new Error('Truncated bitmap data')\n    }\n  }\n\n  get (x, y, channel) {\n    const idx = this.format.indexOf(channel)\n\n    if (this.depth === 1) {\n      const slice = this.data[(y * this.stride) + (x / 8 | 0)]\n      const mask = 1 << (7 - (x % 8) * 1)\n\n      return (slice & mask) >> (7 - (x % 8) * 1)\n    }\n\n    if (this.depth === 2) {\n      const slice = this.data[(y * this.stride) + (x / 4 | 0)]\n      const mask = 3 << (6 - (x % 4) * 2)\n\n      return (slice & mask) >>> (6 - (x % 4) * 2)\n    }\n\n    if (this.depth === 4) {\n      const slice = this.data[(y * this.stride) + (x / 2 | 0)]\n      const mask = 15 << (4 - (x % 2) * 4)\n\n      return (slice & mask) >>> (4 - (x % 2) * 4)\n    }\n\n    return this.data[(y * this.stride) + (x * (this.depth / 8)) + idx]\n  }\n}\n\nfunction decodeTrueColorBmp (data, { width, height, colorDepth, icon }) {\n  if (colorDepth !== 32 && colorDepth !== 24) {\n    throw new Error(`A color depth of ${colorDepth} is not supported`)\n  }\n\n  const xor = new Bitmap(data, 0, { width, height, colorDepth, format: 'BGRA' })\n  const and = (colorDepth === 24 && icon)\n    ? new Bitmap(data, xor.offset + xor.size, { width, height, colorDepth: 1, format: 'A' })\n    : null\n\n  const result = new Uint8Array(width * height * 4)\n\n  let idx = 0\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      result[idx++] = xor.get(x, height - y - 1, 'R')\n      result[idx++] = xor.get(x, height - y - 1, 'G')\n      result[idx++] = xor.get(x, height - y - 1, 'B')\n\n      if (colorDepth === 32) {\n        result[idx++] = xor.get(x, height - y - 1, 'A')\n      } else {\n        result[idx++] = and && and.get(x, height - y - 1, 'A') ? 0 : 255\n      }\n    }\n  }\n\n  return result\n}\n\nfunction decodePaletteBmp (data, { width, height, colorDepth, colorCount, icon }) {\n  if (colorDepth !== 8 && colorDepth !== 4 && colorDepth !== 2 && colorDepth !== 1) {\n    throw new Error(`A color depth of ${colorDepth} is not supported`)\n  }\n\n  const colors = new Bitmap(data, 0, { width: colorCount, height: 1, colorDepth: 32, format: 'BGRA' })\n  const xor = new Bitmap(data, colors.offset + colors.size, { width, height, colorDepth, format: 'C' })\n  const and = icon ? new Bitmap(data, xor.offset + xor.size, { width, height, colorDepth: 1, format: 'A' }) : null\n\n  const result = new Uint8Array(width * height * 4)\n\n  let idx = 0\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const colorIndex = xor.get(x, height - y - 1, 'C')\n\n      result[idx++] = colors.get(colorIndex, 0, 'R')\n      result[idx++] = colors.get(colorIndex, 0, 'G')\n      result[idx++] = colors.get(colorIndex, 0, 'B')\n      result[idx++] = and && and.get(x, height - y - 1, 'A') ? 0 : 255\n    }\n  }\n\n  return result\n}\n\nfunction checkMagicBytes (bytes) {\n  if (bytes !== 0x4D42) throw new Error(`Invalid magic byte 0x${bytes.toString(16)}`)\n}\n\nmodule.exports = function decodeBmp (source, { width: iconWidth = 0, height: iconHeight = 0, icon = false } = {}) {\n  const data = toDataView(source)\n\n  let headerSize\n  let bitmapWidth\n  let bitmapHeight\n  let colorDepth\n  let colorCount\n\n  if (icon) {\n    headerSize = data.getUint32(0, true)\n    bitmapWidth = (data.getUint32(4, true) / 1) | 0\n    bitmapHeight = (data.getUint32(8, true) / 2) | 0\n    colorDepth = data.getUint16(14, true)\n    colorCount = data.getUint32(32, true)\n  } else {\n    checkMagicBytes(data.getUint16(0, true))\n    headerSize = 14 + data.getUint32(14, true)\n    bitmapWidth = data.getUint32(18, true)\n    bitmapHeight = data.getUint32(22, true)\n    colorDepth = data.getUint16(28, true)\n    colorCount = data.getUint32(46, true)\n  }\n\n  if (colorCount === 0 && colorDepth <= 8) {\n    colorCount = (1 << colorDepth)\n  }\n\n  const width = (bitmapWidth === 0 ? iconWidth : bitmapWidth)\n  const height = (bitmapHeight === 0 ? iconHeight : bitmapHeight)\n\n  const bitmapData = new Uint8Array(data.buffer, data.byteOffset + headerSize, data.byteLength - headerSize)\n\n  const result = colorCount\n    ? decodePaletteBmp(bitmapData, { width, height, colorDepth, colorCount, icon })\n    : decodeTrueColorBmp(bitmapData, { width, height, colorDepth, icon })\n\n  return { width, height, data: result, colorDepth }\n}\n"]},"metadata":{},"sourceType":"script"}