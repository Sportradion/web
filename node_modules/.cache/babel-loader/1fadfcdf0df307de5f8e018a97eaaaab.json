{"ast":null,"code":"'use strict';\n\nvar _require = require('../mime'),\n    MIME_PNG = _require.MIME_PNG;\n\nvar dataURLToArrayBuffer = function dataURLToArrayBuffer(dataURL) {\n  var string = atob(dataURL.replace(/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+,/, ''));\n  var view = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n\n  return view.buffer;\n};\n\nvar Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode: function decode(arrayBuffer) {\n    return new Promise(function (resolve) {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      var url = URL.createObjectURL(new Blob([arrayBuffer]));\n      var img = document.createElement('img');\n      img.src = url;\n\n      img.onload = function () {\n        var height = img.naturalHeight,\n            width = img.naturalWidth;\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n\n        var _ctx$getImageData = ctx.getImageData(0, 0, width, height),\n            data = _ctx$getImageData.data;\n\n        resolve({\n          data: data,\n          height: height,\n          width: width\n        });\n      };\n    });\n  },\n\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode: function encode(image) {\n    var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MIME_PNG;\n    return new Promise(function (resolve) {\n      var data = image.data,\n          height = image.height,\n          width = image.width;\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      var imageData = ctx.createImageData(width, height);\n      var dataData = imageData.data;\n\n      for (var i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\nmodule.exports = Image;","map":{"version":3,"sources":["/Users/carlleandersson/web/node_modules/icojs/src/browser/image.js"],"names":["require","MIME_PNG","dataURLToArrayBuffer","dataURL","string","atob","replace","view","Uint8Array","length","i","charCodeAt","buffer","Image","decode","arrayBuffer","Promise","resolve","url","URL","createObjectURL","Blob","img","document","createElement","src","onload","height","naturalHeight","width","naturalWidth","canvas","ctx","getContext","drawImage","getImageData","data","encode","image","mime","imageData","createImageData","dataData","putImageData","toDataURL","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { MIME_PNG } = require('../mime');\n\nconst dataURLToArrayBuffer = dataURL => {\n  const string = atob(dataURL.replace(/.+,/u, ''));\n  const view = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\nconst Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode (arrayBuffer) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const url = URL.createObjectURL(new Blob([arrayBuffer]));\n      const img = document.createElement('img');\n      img.src = url;\n      img.onload = () => {\n        const { naturalHeight: height, naturalWidth: width } = img;\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const { data } = ctx.getImageData(0, 0, width, height);\n        resolve({\n          data,\n          height,\n          width\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode (image, mime = MIME_PNG) {\n    return new Promise(resolve => {\n      const { data, height, width } = image;\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      const dataData = imageData.data;\n      for (let i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\n\nmodule.exports = Image;\n"]},"metadata":{},"sourceType":"script"}